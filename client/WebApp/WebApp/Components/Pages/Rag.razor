@page "/retriever"
@inject MyRAGService RAGService
@inject IJSRuntime JS
@rendermode InteractiveServer

<PageTitle>RAG Invoke</PageTitle>
<div class="chat-wrapper">
    <div class="chat-container">
        <div id="output" class="chat-output">@outputText</div>
    </div>
    <div class="chat-input">
        <input @bind="inputText" placeholder="Enter input" @oninput="EnableButton" />
        <button @onclick="InvokeRAGService" disabled="@isRequestInProgress">Send</button>
    </div>
</div>

<style>
    .chat-wrapper {
        display: flex;
        flex-direction: column;
        height: calc(100vh - 80px);
        max-width: 600px;
        margin: 0 auto;
        border: 1px solid #ccc;
        border-radius: 8px;
        overflow: hidden;
        position: relative;
        background-color: #f9f9f9;
    }

    .chat-container {
        flex: 1;
        display: flex;
        flex-direction: column;
        overflow-y: auto;
        padding: 10px;
        background-color: #ffffff;
    }

    .chat-output {
        flex: 1;
        padding: 10px;
        overflow-y: auto;
        background-color: #ffffff;
        border-bottom: 1px solid #ccc;
    }

    .chat-input {
        display: flex;
        justify-content: center;
        padding: 10px;
        background-color: #fff;
        border-top: 1px solid #ccc;
    }

        .chat-input input {
            flex: 1;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 4px;
            margin-right: 10px;
        }

        .chat-input button {
            padding: 10px 20px;
            background-color: #007bff;
            border: none;
            border-radius: 4px;
            color: #fff;
            cursor: pointer;
        }

            .chat-input button:disabled {
                background-color: #ccc;
                cursor: not-allowed;
            }
</style>
@code {
    private string inputText = string.Empty;
    private string outputText = string.Empty;
    private bool isRequestInProgress = false;

    private async Task InvokeRAGService()
    {
        try
        {
            isRequestInProgress = true;
            outputText = string.Empty;
            await RAGService.StreamRAGAsync(inputText, async (chunk) =>
            {
                if (!string.IsNullOrEmpty(chunk) && !chunk.StartsWith("{") && !chunk.StartsWith("\\"))
                {
                    var chunkData = chunk.Replace("\"", "").Replace("\\n", "\n");
                    await JS.InvokeVoidAsync("updateOutput", chunkData);
                }
            });
        }
        catch (Exception ex)
        {
            outputText = $"Error: {ex.Message}";
        }
        finally
        {
            await JS.InvokeVoidAsync("updateOutput", "\n\n");
            isRequestInProgress = false;
            StateHasChanged();
        }
    }

    private void EnableButton(ChangeEventArgs e)
    {
        isRequestInProgress = false;
    }
}
