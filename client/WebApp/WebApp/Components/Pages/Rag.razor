@page "/retriever"

@inject MyRAGService RAGService
@inject IJSRuntime JS

@rendermode InteractiveServer

<PageTitle>RAG Invoke</PageTitle>

<div class="chat-wrapper">
    <div class="chat-container">
        <div id="output" class="chat-output">
            @* De inhoud wordt door JavaScript gevuld. *@
        </div>
    </div>
    <div class="chat-input">
        <input @bind="inputText" placeholder="Enter input" @oninput="EnableButton" />
        <button @onclick="InvokeRAGService" disabled="@isRequestInProgress">Send</button>
    </div>
</div>

<style>
    .chat-wrapper {
        display: flex;
        flex-direction: column;
        height: calc(100vh - 80px);
        max-width: 600px;
        margin: 0 auto;
        border: 1px solid #ccc;
        border-radius: 8px;
        overflow: hidden;
        position: relative;
        background-color: #f9f9f9;
    }

    .chat-container {
        flex: 1;
        display: flex;
        flex-direction: column;
        overflow-y: auto;
        padding: 10px;
        margin-bottom: 50px;
        background-color: #ffffff;
    }

    .chat-output {
        flex: 1;
        padding: 10px;
        overflow-y: auto;
        background-color: #ffffff;
        border-bottom: 1px solid #ccc;
        white-space: pre-wrap; 
    }

    .chat-input {
        display: flex;
        justify-content: center;
        padding: 10px;
        background-color: #fff;
        border-top: 1px solid #ccc;
        position: fixed;
        bottom: 0;
        width: calc(100% - 2 * 10px); 
        max-width: 600px;
        box-sizing: border-box; 
    }

        .chat-input input {
            flex: 1;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 4px;
            margin-right: 10px;
        }

        .chat-input button {
            padding: 10px 20px;
            background-color: #007bff;
            border: none;
            border-radius: 4px;
            color: #fff;
            cursor: pointer;
        }

            .chat-input button:disabled {
                background-color: #ccc;
                cursor: not-allowed;
            }
</style>

@code {
    private string inputText = string.Empty;
    private bool isRequestInProgress = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("loadChatHistory");
        }
        await JS.InvokeVoidAsync("scrollToBottom");
    }

    private async Task InvokeRAGService()
    {
        try
        {
            isRequestInProgress = true;
            var fullResponse = new StringBuilder();

            await RAGService.StreamRAGAsync(inputText, async (chunk) =>
            {
                if (!string.IsNullOrWhiteSpace(chunk) && !chunk.StartsWith("{") && !chunk.StartsWith("\\"))
                {
                    var chunkData = chunk.Replace("\"", "").Replace("\\n", "\n");
                    fullResponse.Append(chunkData);
                    await JS.InvokeVoidAsync("updateOutput", chunkData);
                }
            });

            var completeMessage = fullResponse.ToString();
            await JS.InvokeVoidAsync("saveChatHistory", completeMessage);
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("updateOutput", $"Error: {ex.Message}");
        }
        finally
        {
            await JS.InvokeVoidAsync("updateOutput", "\n\n");
            inputText = string.Empty;
            isRequestInProgress = false;
            StateHasChanged();
        }
    }

    private void EnableButton(ChangeEventArgs e)
    {
        isRequestInProgress = false;
    }
}

<script>
    window.scrollToBottom = () => {
        const outputElement = document.getElementById('output');
        if (outputElement) {
            outputElement.scrollTop = outputElement.scrollHeight;
        }
    };

    window.updateOutput = (chunk) => {
        const outputElement = document.getElementById('output');
        if (outputElement) {
            outputElement.innerHTML += chunk;
            window.saveChatHistory(outputElement.innerHTML); 
            outputElement.scrollTop = outputElement.scrollHeight;
        }
    };

    window.saveChatHistory = (content) => {
        localStorage.setItem('chatHistory', content);
    };

    window.loadChatHistory = () => {
        const outputElement = document.getElementById('output');
        const chatHistory = localStorage.getItem('chatHistory');
        if (outputElement && chatHistory) {
            outputElement.innerHTML = chatHistory;
            outputElement.scrollTop = outputElement.scrollHeight;
        }
    };
</script>
