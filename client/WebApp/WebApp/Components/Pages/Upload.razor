@page "/upload"

@rendermode InteractiveServer

@inject IJSRuntime JS
@inject WebApp.Components.Services.BlobService BlobService

<PageTitle>Upload</PageTitle>

<div class="upload-container">
    <h3>Upload</h3>

    <div class="file-input">
        <InputFile OnChange="HandleFileSelected" accept=".txt,.pdf,.html" />
    </div>
    <button class="upload-button" @onclick="UploadFile">Upload</button>

    @if (selectedFile != null)
    {
        <p class="file-info">Selected file: @selectedFile.Name</p>
    }
    @if (!string.IsNullOrEmpty(uploadResult))
    {
        <p class="upload-result">@uploadResult</p>
    }

</div>



<style>
    .upload-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        margin: 20px auto;
        padding: 20px;
        max-width: 600px;
        border: 1px solid #ccc;
        border-radius: 8px;
        background-color: #f9f9f9;
    }

    .file-input {
        margin-bottom: 20px;
    }

    .upload-button {
        padding: 10px 20px;
        background-color: #007bff;
        border: none;
        border-radius: 4px;
        color: #fff;
        cursor: pointer;
        margin-bottom: 20px;
    }

        .upload-button:disabled {
            background-color: #ccc;
            cursor: not-allowed;
        }

    .upload-result {
        color:lightgray;
    }

    .file-info {
        color: #007bff;
    }

    .error-message {
        color: red;
    }
</style>
@code {
    private IBrowserFile? selectedFile;
    private string? uploadResult;

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        await JS.InvokeVoidAsync("logger.log", "Trigger handle file");
        uploadResult = "";
        selectedFile = e.File;
        StateHasChanged(); 
    }

    private async Task UploadFile()
    {
        try
        {
            if (selectedFile != null)
            {
                var tempFilePath = Path.GetTempFileName();
                using (var stream = selectedFile.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024)) // maxAllowedSize is 10MB
                using (var fileStream = new FileStream(tempFilePath, FileMode.Create))
                {
                    await stream.CopyToAsync(fileStream);
                }

                await BlobService.UploadFromFileAsync(tempFilePath, selectedFile.Name);
                uploadResult = $"File '{selectedFile.Name}' uploaded successfully.";
            }
            else
            {
                uploadResult = "Please select a file to upload.";
            }
        }
        catch (Exception ex)
        {
            uploadResult = $"Error uploading file: {ex.Message}";
            Console.WriteLine($"Error: {ex}");
        }
        finally
        {
            selectedFile = null;
            StateHasChanged();
        }
    }
}
